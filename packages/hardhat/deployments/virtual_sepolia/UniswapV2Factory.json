{
  "address": "0xc12bD03902cb4E6f63a396ddFA90EEDA56e25e1f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf113a5949b8ef5b57f1da37020e74f38eb797db737b89a2e672fb04f387de6e",
  "receipt": {
    "to": null,
    "from": "0x162012524F1c0C3F2F77927d40809A349FB73fF2",
    "contractAddress": "0xc12bD03902cb4E6f63a396ddFA90EEDA56e25e1f",
    "transactionIndex": 0,
    "gasUsed": "2331378",
    "logsBloom": "0x
    "blockHash": "0x7aa12aef7621eae870000933999f4293db82f7472137cf43023fe8be08418d83",
    "transactionHash": "0xaf113a5949b8ef5b57f1da37020e74f38eb797db737b89a2e672fb04f387de6e",
    "logs": [],
    "blockNumber": 8071029,
    "cumulativeGasUsed": "2331378",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x162012524F1c0C3F2F77927d40809A349FB73fF2"
  ],
  "numDeployments": 1,
  "solcInputHash": "57e62531c9263f1225b5941c429ab516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {IUniswapV2ERC20} from \\\"./interfaces/IUniswapV2ERC20.sol\\\";\\r\\n\\r\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\r\\n    string public constant override name = \\\"Uniswap V2\\\";\\r\\n    string public constant override symbol = \\\"UNI-V2\\\";\\r\\n    uint8 public constant override decimals = 18;\\r\\n    uint256 public override totalSupply;\\r\\n    mapping(address => uint256) public override balanceOf;\\r\\n    mapping(address => mapping(address => uint256)) public override allowance;\\r\\n\\r\\n    bytes32 public override DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant override PERMIT_TYPEHASH =\\r\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint256) public override nonces;\\r\\n\\r\\n    constructor() {\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 value) internal {\\r\\n        totalSupply += value;\\r\\n        balanceOf[to] += value;\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 value) internal {\\r\\n        balanceOf[from] -= value;\\r\\n        totalSupply -= value;\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 value) private {\\r\\n        balanceOf[from] -= value;\\r\\n        balanceOf[to] += value;\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external override returns (bool) {\\r\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\r\\n            allowance[from][msg.sender] -= value;\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        PERMIT_TYPEHASH,\\r\\n                        owner,\\r\\n                        spender,\\r\\n                        value,\\r\\n                        nonces[owner]++,\\r\\n                        deadline\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\r\\n            \\\"UniswapV2: INVALID_SIGNATURE\\\"\\r\\n        );\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4f24236fc461e11e839e288c177c174701df90439814461dbdb05a84fc031483\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {IUniswapV2Factory} from \\\"./interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"./interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {UniswapV2Pair} from \\\"./UniswapV2Pair.sol\\\";\\r\\n\\r\\ncontract UniswapV2Factory is IUniswapV2Factory {\\r\\n    bytes32 public constant PAIR_HASH =\\r\\n        keccak256(type(UniswapV2Pair).creationCode);\\r\\n\\r\\n    address public override feeTo;\\r\\n    address public override feeToSetter;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getPair;\\r\\n    address[] public override allPairs;\\r\\n\\r\\n    constructor(address _feeToSetter) {\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external view override returns (uint256) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external override returns (address pair) {\\r\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\r\\n        (address token0, address token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\r\\n        require(\\r\\n            getPair[token0][token1] == address(0),\\r\\n            \\\"UniswapV2: PAIR_EXISTS\\\"\\r\\n        ); // single check is sufficient\\r\\n\\r\\n        pair = address(\\r\\n            new UniswapV2Pair{\\r\\n                salt: keccak256(abi.encodePacked(token0, token1))\\r\\n            }()\\r\\n        );\\r\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external override {\\r\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external override {\\r\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9156c62891376b695aedfced72ec1b773575be58ca19e7a019a3a43797b17840\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {IUniswapV2Pair} from \\\"./interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {UniswapV2ERC20} from \\\"./UniswapV2ERC20.sol\\\";\\r\\nimport {Math} from \\\"./libraries/Math.sol\\\";\\r\\nimport {UQ112x112} from \\\"./libraries/UQ112x112.sol\\\";\\r\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\r\\nimport {IUniswapV2Factory} from \\\"./interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Callee} from \\\"./interfaces/IUniswapV2Callee.sol\\\";\\r\\n\\r\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint256 public constant override MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n\\r\\n    address public override factory;\\r\\n    address public override token0;\\r\\n    address public override token1;\\r\\n\\r\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\r\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint256 public override price0CumulativeLast;\\r\\n    uint256 public override price1CumulativeLast;\\r\\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint256 private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function getReserves()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint112 _reserve0,\\r\\n            uint112 _reserve1,\\r\\n            uint32 _blockTimestampLast\\r\\n        )\\r\\n    {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint256 value) private {\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"UniswapV2: TRANSFER_FAILED\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) external override {\\r\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(\\r\\n        uint256 balance0,\\r\\n        uint256 balance1,\\r\\n        uint112 _reserve0,\\r\\n        uint112 _reserve1\\r\\n    ) private {\\r\\n        require(\\r\\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\\r\\n            \\\"UniswapV2: OVERFLOW\\\"\\r\\n        );\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\r\\n        unchecked {\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n            if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n                // * never overflows, and + overflow is desired\\r\\n                price0CumulativeLast +=\\r\\n                    uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\r\\n                    timeElapsed;\\r\\n                price1CumulativeLast +=\\r\\n                    uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\r\\n                    timeElapsed;\\r\\n            }\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\r\\n    function _mintFee(\\r\\n        uint112 _reserve0,\\r\\n        uint112 _reserve1\\r\\n    ) private returns (bool feeOn) {\\r\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint256 _kLast = kLast; // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint256 rootK = Math.sqrt(uint256(_reserve0) * _reserve1);\\r\\n                uint256 rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint256 numerator = totalSupply * (rootK - rootKLast);\\r\\n                    uint256 denominator = rootK * 5 + rootKLast;\\r\\n                    uint256 liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(\\r\\n        address to\\r\\n    ) external override lock returns (uint256 liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\r\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint256 amount0 = balance0 - _reserve0;\\r\\n        uint256 amount1 = balance1 - _reserve1;\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\r\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = Math.min(\\r\\n                (amount0 * _totalSupply) / _reserve0,\\r\\n                (amount1 * _totalSupply) / _reserve1\\r\\n            );\\r\\n        }\\r\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(msg.sender, amount0, amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\r\\n        address _token0 = token0; // gas savings\\r\\n        address _token1 = token1; // gas savings\\r\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint256 liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        require(\\r\\n            amount0 > 0 && amount1 > 0,\\r\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\r\\n        );\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external override lock {\\r\\n        require(\\r\\n            amount0Out > 0 || amount1Out > 0,\\r\\n            \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\r\\n        );\\r\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\r\\n        require(\\r\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\r\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 balance0;\\r\\n        uint256 balance1;\\r\\n        {\\r\\n            // scope for _token{0,1}, avoids stack too deep errors\\r\\n            address _token0 = token0;\\r\\n            address _token1 = token1;\\r\\n            require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\r\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\r\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\r\\n            if (data.length > 0)\\r\\n                IUniswapV2Callee(to).uniswapV2Call(\\r\\n                    msg.sender,\\r\\n                    amount0Out,\\r\\n                    amount1Out,\\r\\n                    data\\r\\n                );\\r\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\\r\\n            ? balance0 - (_reserve0 - amount0Out)\\r\\n            : 0;\\r\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\\r\\n            ? balance1 - (_reserve1 - amount1Out)\\r\\n            : 0;\\r\\n        require(\\r\\n            amount0In > 0 || amount1In > 0,\\r\\n            \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\"\\r\\n        );\\r\\n        {\\r\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\\r\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\\r\\n            require(\\r\\n                balance0Adjusted * balance1Adjusted >=\\r\\n                    uint256(_reserve0) * _reserve1 * 1e6,\\r\\n                \\\"UniswapV2: K\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) external override lock {\\r\\n        address _token0 = token0; // gas savings\\r\\n        address _token1 = token1; // gas savings\\r\\n        _safeTransfer(\\r\\n            _token0,\\r\\n            to,\\r\\n            IERC20(_token0).balanceOf(address(this)) - reserve0\\r\\n        );\\r\\n        _safeTransfer(\\r\\n            _token1,\\r\\n            to,\\r\\n            IERC20(_token1).balanceOf(address(this)) - reserve1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external override lock {\\r\\n        _update(\\r\\n            IERC20(token0).balanceOf(address(this)),\\r\\n            IERC20(token1).balanceOf(address(this)),\\r\\n            reserve0,\\r\\n            reserve1\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xff3432d8e5ccb1c6bd0c6651c5184e4ad8d6dc3a26cc5cf9ab07d50693de36b7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x0c78ae8a818e7c13f092d2e68dbffbf670f53fbec43fdc76c282799f53a9545f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IUniswapV2Callee {\\r\\n    function uniswapV2Call(\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4469f6aac8bb76f509a2d3ede71dc0559db9fd52f04239da22750361de473b44\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IUniswapV2ERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x94776b0edb64481a24c10072ebcba5245f235173ef440b9cde5c08f11e7aac2f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x47f8613b0ac9ef1359df6f511098e1c8fab07a7eb662e0b316d6dc9d6df6dbba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {IUniswapV2ERC20} from \\\"./IUniswapV2ERC20.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbf1f499f7f075f2b0be82a2cfd3cc7562be5c28298f38f9901f153a157fde675\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5cfded5e36f8f64ac33feff8f667698019f4a37a4abd77ed468a0d678a2123bb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    //solhint-disable-next-line state-visibility\\r\\n    uint224 constant Q112 = 2 ** 112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfdcc648740f074f6e91a4070b5fefcf1e5141c4f130e51904489035aa0867c72\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161295238038061295283398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6128c1806100916000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806364f91c721161006657806364f91c7214610100578063a2e74af614610108578063c9c653961461011d578063e6a4390514610130578063f46901ed1461016457600080fd5b8063017e7e5814610098578063094b7415146100c85780631e3dd18b146100db578063574f2ba3146100ee575b600080fd5b6000546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100ab906001600160a01b031681565b6100ab6100e9366004610629565b610177565b6003545b6040519081526020016100bf565b6100f26101a1565b61011b6101163660046105d6565b6101ce565b005b6100ab61012b3660046105f7565b610246565b6100ab61013e3660046105f7565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61011b6101723660046105d6565b61053a565b6003818154811061018757600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516101b0602082016105ad565b6020820181038252601f19601f820116604052508051906020012081565b6001546001600160a01b031633146102245760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102aa5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015260640161021b565b600080836001600160a01b0316856001600160a01b0316106102cd5783856102d0565b84845b90925090506001600160a01b03821661032b5760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015260640161021b565b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103995760405162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015260640161021b565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152604801604051602081830303815290604052805190602001206040516103e4906105ad565b8190604051809103906000f5905080158015610404573d6000803e3d6000fd5b5060405163485cc95560e01b81526001600160a01b03848116600483015283811660248301529194509084169063485cc95590604401600060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526002602081815260408084208787168086529083528185208054978b166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505092915050565b6001546001600160a01b0316331461058b5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161021b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61224a8061064283390190565b80356001600160a01b03811681146105d157600080fd5b919050565b6000602082840312156105e7578081fd5b6105f0826105ba565b9392505050565b60008060408385031215610609578081fd5b610612836105ba565b9150610620602084016105ba565b90509250929050565b60006020828403121561063a578081fd5b503591905056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600355600580546001600160a01b0319163317905561213c8061010e6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610408578063d505accf1461041b578063dd62ed3e1461042e578063fff6cae91461045957600080fd5b8063ba9a7a56146103d9578063bc25cf77146103e2578063c45a0155146103f557600080fd5b80637ecebe00116100d35780637ecebe001461035957806389afcb441461037957806395d89b41146103a1578063a9059cbb146103c657600080fd5b80636a6278421461031d57806370a08231146103305780637464fc3d1461035057600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102ef578063485cc955146102f85780635909c0d51461030b5780635a3d54931461031457600080fd5b806323b872dd1461029b57806330adf81f146102ae578063313ce567146102d557600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610202578063095ea7b3146102365780630dfe16811461025957806318160ddd14610284575b600080fd5b6101c16101bc366004611e55565b610461565b005b6101ec6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101f99190611f4e565b60405180910390f35b61020a610999565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f9565b610249610244366004611df2565b6109c3565b60405190151581526020016101f9565b60065461026c906001600160a01b031681565b6040516001600160a01b0390911681526020016101f9565b61028d60005481565b6040519081526020016101f9565b6102496102a9366004611d3d565b6109d9565b61028d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102dd601281565b60405160ff90911681526020016101f9565b61028d60035481565b6101c1610306366004611d05565b610a53565b61028d60095481565b61028d600a5481565b61028d61032b366004611ccd565b610ad2565b61028d61033e366004611ccd565b60016020526000908152604090205481565b61028d600b5481565b61028d610367366004611ccd565b60046020526000908152604090205481565b61038c610387366004611ccd565b610dbb565b604080519283526020830191909152016101f9565b6101ec604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6102496103d4366004611df2565b61115c565b61028d6103e881565b6101c16103f0366004611ccd565b611169565b60055461026c906001600160a01b031681565b60075461026c906001600160a01b031681565b6101c1610429366004611d7d565b61128b565b61028d61043c366004611d05565b600260209081526000928352604080842090915290825290205481565b6101c161149f565b600c5460011461048c5760405162461bcd60e51b815260040161048390611f81565b60405180910390fd5b6000600c558415158061049f5750600084115b6104f95760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610483565b600080610504610999565b5091509150816001600160701b0316871080156105295750806001600160701b031686105b61057f5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610483565b60065460075460009182916001600160a01b039182169190811690891682148015906105bd5750806001600160a01b0316896001600160a01b031614155b6106015760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610483565b8a1561061257610612828a8d6115e1565b891561062357610623818a8c6115e1565b8615610690576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061065d9033908f908f908e908e90600401611f02565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156106cf57600080fd5b505afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190611e3d565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190611e3d565b92505050600089856001600160701b031661079c919061204c565b83116107a95760006107c6565b6107bc8a6001600160701b03871661204c565b6107c6908461204c565b905060006107dd8a6001600160701b03871661204c565b83116107ea576000610807565b6107fd8a6001600160701b03871661204c565b610807908461204c565b905060008211806108185750600081115b6108705760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610483565b600061087d83600361202d565b610889866103e861202d565b610893919061204c565b905060006108a283600361202d565b6108ae866103e861202d565b6108b8919061204c565b90506108d06001600160701b03808916908a1661202d565b6108dd90620f424061202d565b6108e7828461202d565b10156109245760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610483565b5050610932848488886116fc565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006109d03384846118b4565b50600192915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a3e576001600160a01b038416600090815260026020908152604080832033845290915281208054849290610a3890849061204c565b90915550505b610a49848484611916565b5060019392505050565b6005546001600160a01b03163314610aa45760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610483565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610af65760405162461bcd60e51b815260040161048390611f81565b6000600c81905580610b06610999565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611e3d565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bd457600080fd5b505afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190611e3d565b90506000610c236001600160701b0386168461204c565b90506000610c3a6001600160701b0386168461204c565b90506000610c4887876119b7565b60005490915080610c86576103e8610c68610c63858761202d565b611b05565b610c72919061204c565b9850610c8160006103e8611b75565b610ccd565b610cca6001600160701b038916610c9d838761202d565b610ca79190611fea565b6001600160701b038916610cbb848761202d565b610cc59190611fea565b611bfe565b98505b60008911610d2e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610483565b610d388a8a611b75565b610d4486868a8a6116fc565b8115610d6d57600854610d69906001600160701b03600160701b82048116911661202d565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610de05760405162461bcd60e51b815260040161048390611f81565b6000600c81905580610df0610999565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611e3d565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa9190611e3d565b30600090815260016020526040812054919250610f1788886119b7565b60005490915080610f28868561202d565b610f329190611fea565b9a5080610f3f858561202d565b610f499190611fea565b995060008b118015610f5b575060008a115b610fb85760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610483565b610fc23084611c16565b610fcd878d8d6115e1565b610fd8868d8c6115e1565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190611e3d565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a082319060240160206040518083038186803b15801561109157600080fd5b505afa1580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190611e3d565b93506110d785858b8b6116fc565b8115611100576008546110fc906001600160701b03600160701b82048116911661202d565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b60006109d0338484611916565b600c5460011461118b5760405162461bcd60e51b815260040161048390611f81565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b03938416939092169161123991849186916001600160701b03169083906370a08231906024015b60206040518083038186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a9190611e3d565b611234919061204c565b6115e1565b6008546040516370a0823160e01b81523060048201526112819183918691600160701b90046001600160701b0316906001600160a01b038416906370a08231906024016111da565b50506001600c5550565b428410156112d05760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610483565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761132383612093565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161139c92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611407573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061143d5750886001600160a01b0316816001600160a01b0316145b6114895760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610483565b6114948989896118b4565b505050505050505050565b600c546001146114c15760405162461bcd60e51b815260040161048390611f81565b6000600c556006546040516370a0823160e01b81523060048201526115da916001600160a01b0316906370a082319060240160206040518083038186803b15801561150b57600080fd5b505afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115439190611e3d565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115be9190611e3d565b6008546001600160701b0380821691600160701b9004166116fc565b6001600c55565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161163d9190611ee6565b6000604051808303816000865af19150503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b50915091508180156116a95750805115806116a95750808060200190518101906116a99190611e1d565b6116f55760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610483565b5050505050565b6001600160701b03841180159061171a57506001600160701b038311155b61175c5760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610483565b600061176d640100000000426120ae565b60085490915063ffffffff600160e01b909104811682039081161580159061179d57506001600160701b03841615155b80156117b157506001600160701b03831615155b1561181c578063ffffffff166117d9856117ca86611c99565b6001600160e01b031690611cb8565b600980546001600160e01b03929092169290920201905563ffffffff8116611804846117ca87611c99565b600a80546001600160e01b0392909216929092020190555b506008805463ffffffff8316600160e01b026001600160e01b036001600160701b03888116600160701b9081026001600160e01b03199095168b83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a15050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166000908152600160205260408120805483929061193e90849061204c565b90915550506001600160a01b0382166000908152600160205260408120805483929061196b908490611fac565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161190991815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0857600080fd5b505afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190611ce9565b600b546001600160a01b038216158015945091925090611af1578015611aec576000611a7b610c636001600160701b0380881690891661202d565b90506000611a8883611b05565b905080821115611ae9576000611a9e828461204c565b600054611aab919061202d565b9050600082611abb85600561202d565b611ac59190611fac565b90506000611ad38284611fea565b90508015611ae557611ae58782611b75565b5050505b50505b611afd565b8015611afd576000600b555b505092915050565b60006003821115611b665750806000611b1f600283611fea565b611b2a906001611fac565b90505b81811015611b6057905080600281611b458186611fea565b611b4f9190611fac565b611b599190611fea565b9050611b2d565b50919050565b8115611b70575060015b919050565b80600080828254611b869190611fac565b90915550506001600160a01b03821660009081526001602052604081208054839290611bb3908490611fac565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310611c0d5781611c0f565b825b9392505050565b6001600160a01b03821660009081526001602052604081208054839290611c3e90849061204c565b9250508190555080600080828254611c56919061204c565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611bf2565b6000611cb2600160701b6001600160701b038416611ffe565b92915050565b6000611c0f6001600160701b03831684611fc4565b600060208284031215611cde578081fd5b8135611c0f816120ee565b600060208284031215611cfa578081fd5b8151611c0f816120ee565b60008060408385031215611d17578081fd5b8235611d22816120ee565b91506020830135611d32816120ee565b809150509250929050565b600080600060608486031215611d51578081fd5b8335611d5c816120ee565b92506020840135611d6c816120ee565b929592945050506040919091013590565b600080600080600080600060e0888a031215611d97578283fd5b8735611da2816120ee565b96506020880135611db2816120ee565b95506040880135945060608801359350608088013560ff81168114611dd5578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611e04578182fd5b8235611e0f816120ee565b946020939093013593505050565b600060208284031215611e2e578081fd5b81518015158114611c0f578182fd5b600060208284031215611e4e578081fd5b5051919050565b600080600080600060808688031215611e6c578081fd5b85359450602086013593506040860135611e85816120ee565b9250606086013567ffffffffffffffff80821115611ea1578283fd5b818801915088601f830112611eb4578283fd5b813581811115611ec2578384fd5b896020828501011115611ed3578384fd5b9699959850939650602001949392505050565b60008251611ef8818460208701612063565b9190910192915050565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b6020815260008251806020840152611f6d816040850160208701612063565b601f01601f19169190910160400192915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60008219821115611fbf57611fbf6120c2565b500190565b60006001600160e01b0383811680611fde57611fde6120d8565b92169190910492915050565b600082611ff957611ff96120d8565b500490565b60006001600160e01b0382811684821681151582840482111615612024576120246120c2565b02949350505050565b6000816000190483118215151615612047576120476120c2565b500290565b60008282101561205e5761205e6120c2565b500390565b60005b8381101561207e578181015183820152602001612066565b8381111561208d576000848401525b50505050565b60006000198214156120a7576120a76120c2565b5060010190565b6000826120bd576120bd6120d8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461210357600080fd5b5056fea2646970667358221220016b6f924fcf5a9f69047fc79f9d249da56bea86af56089871e8067fbbf4b29164736f6c63430008040033a26469706673582212206df6fdc6123faf653b240156dbeffa82787cf4ca21e76ee8371a58176208694e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806364f91c721161006657806364f91c7214610100578063a2e74af614610108578063c9c653961461011d578063e6a4390514610130578063f46901ed1461016457600080fd5b8063017e7e5814610098578063094b7415146100c85780631e3dd18b146100db578063574f2ba3146100ee575b600080fd5b6000546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100ab906001600160a01b031681565b6100ab6100e9366004610629565b610177565b6003545b6040519081526020016100bf565b6100f26101a1565b61011b6101163660046105d6565b6101ce565b005b6100ab61012b3660046105f7565b610246565b6100ab61013e3660046105f7565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61011b6101723660046105d6565b61053a565b6003818154811061018757600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516101b0602082016105ad565b6020820181038252601f19601f820116604052508051906020012081565b6001546001600160a01b031633146102245760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102aa5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015260640161021b565b600080836001600160a01b0316856001600160a01b0316106102cd5783856102d0565b84845b90925090506001600160a01b03821661032b5760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015260640161021b565b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103995760405162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015260640161021b565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152604801604051602081830303815290604052805190602001206040516103e4906105ad565b8190604051809103906000f5905080158015610404573d6000803e3d6000fd5b5060405163485cc95560e01b81526001600160a01b03848116600483015283811660248301529194509084169063485cc95590604401600060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526002602081815260408084208787168086529083528185208054978b166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505092915050565b6001546001600160a01b0316331461058b5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161021b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61224a8061064283390190565b80356001600160a01b03811681146105d157600080fd5b919050565b6000602082840312156105e7578081fd5b6105f0826105ba565b9392505050565b60008060408385031215610609578081fd5b610612836105ba565b9150610620602084016105ba565b90509250929050565b60006020828403121561063a578081fd5b503591905056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600355600580546001600160a01b0319163317905561213c8061010e6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610408578063d505accf1461041b578063dd62ed3e1461042e578063fff6cae91461045957600080fd5b8063ba9a7a56146103d9578063bc25cf77146103e2578063c45a0155146103f557600080fd5b80637ecebe00116100d35780637ecebe001461035957806389afcb441461037957806395d89b41146103a1578063a9059cbb146103c657600080fd5b80636a6278421461031d57806370a08231146103305780637464fc3d1461035057600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102ef578063485cc955146102f85780635909c0d51461030b5780635a3d54931461031457600080fd5b806323b872dd1461029b57806330adf81f146102ae578063313ce567146102d557600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610202578063095ea7b3146102365780630dfe16811461025957806318160ddd14610284575b600080fd5b6101c16101bc366004611e55565b610461565b005b6101ec6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101f99190611f4e565b60405180910390f35b61020a610999565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f9565b610249610244366004611df2565b6109c3565b60405190151581526020016101f9565b60065461026c906001600160a01b031681565b6040516001600160a01b0390911681526020016101f9565b61028d60005481565b6040519081526020016101f9565b6102496102a9366004611d3d565b6109d9565b61028d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102dd601281565b60405160ff90911681526020016101f9565b61028d60035481565b6101c1610306366004611d05565b610a53565b61028d60095481565b61028d600a5481565b61028d61032b366004611ccd565b610ad2565b61028d61033e366004611ccd565b60016020526000908152604090205481565b61028d600b5481565b61028d610367366004611ccd565b60046020526000908152604090205481565b61038c610387366004611ccd565b610dbb565b604080519283526020830191909152016101f9565b6101ec604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6102496103d4366004611df2565b61115c565b61028d6103e881565b6101c16103f0366004611ccd565b611169565b60055461026c906001600160a01b031681565b60075461026c906001600160a01b031681565b6101c1610429366004611d7d565b61128b565b61028d61043c366004611d05565b600260209081526000928352604080842090915290825290205481565b6101c161149f565b600c5460011461048c5760405162461bcd60e51b815260040161048390611f81565b60405180910390fd5b6000600c558415158061049f5750600084115b6104f95760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610483565b600080610504610999565b5091509150816001600160701b0316871080156105295750806001600160701b031686105b61057f5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610483565b60065460075460009182916001600160a01b039182169190811690891682148015906105bd5750806001600160a01b0316896001600160a01b031614155b6106015760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610483565b8a1561061257610612828a8d6115e1565b891561062357610623818a8c6115e1565b8615610690576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061065d9033908f908f908e908e90600401611f02565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156106cf57600080fd5b505afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190611e3d565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190611e3d565b92505050600089856001600160701b031661079c919061204c565b83116107a95760006107c6565b6107bc8a6001600160701b03871661204c565b6107c6908461204c565b905060006107dd8a6001600160701b03871661204c565b83116107ea576000610807565b6107fd8a6001600160701b03871661204c565b610807908461204c565b905060008211806108185750600081115b6108705760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610483565b600061087d83600361202d565b610889866103e861202d565b610893919061204c565b905060006108a283600361202d565b6108ae866103e861202d565b6108b8919061204c565b90506108d06001600160701b03808916908a1661202d565b6108dd90620f424061202d565b6108e7828461202d565b10156109245760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610483565b5050610932848488886116fc565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006109d03384846118b4565b50600192915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a3e576001600160a01b038416600090815260026020908152604080832033845290915281208054849290610a3890849061204c565b90915550505b610a49848484611916565b5060019392505050565b6005546001600160a01b03163314610aa45760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610483565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610af65760405162461bcd60e51b815260040161048390611f81565b6000600c81905580610b06610999565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611e3d565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bd457600080fd5b505afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190611e3d565b90506000610c236001600160701b0386168461204c565b90506000610c3a6001600160701b0386168461204c565b90506000610c4887876119b7565b60005490915080610c86576103e8610c68610c63858761202d565b611b05565b610c72919061204c565b9850610c8160006103e8611b75565b610ccd565b610cca6001600160701b038916610c9d838761202d565b610ca79190611fea565b6001600160701b038916610cbb848761202d565b610cc59190611fea565b611bfe565b98505b60008911610d2e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610483565b610d388a8a611b75565b610d4486868a8a6116fc565b8115610d6d57600854610d69906001600160701b03600160701b82048116911661202d565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610de05760405162461bcd60e51b815260040161048390611f81565b6000600c81905580610df0610999565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611e3d565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa9190611e3d565b30600090815260016020526040812054919250610f1788886119b7565b60005490915080610f28868561202d565b610f329190611fea565b9a5080610f3f858561202d565b610f499190611fea565b995060008b118015610f5b575060008a115b610fb85760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610483565b610fc23084611c16565b610fcd878d8d6115e1565b610fd8868d8c6115e1565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190611e3d565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a082319060240160206040518083038186803b15801561109157600080fd5b505afa1580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190611e3d565b93506110d785858b8b6116fc565b8115611100576008546110fc906001600160701b03600160701b82048116911661202d565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b60006109d0338484611916565b600c5460011461118b5760405162461bcd60e51b815260040161048390611f81565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b03938416939092169161123991849186916001600160701b03169083906370a08231906024015b60206040518083038186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a9190611e3d565b611234919061204c565b6115e1565b6008546040516370a0823160e01b81523060048201526112819183918691600160701b90046001600160701b0316906001600160a01b038416906370a08231906024016111da565b50506001600c5550565b428410156112d05760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610483565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761132383612093565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161139c92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611407573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061143d5750886001600160a01b0316816001600160a01b0316145b6114895760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610483565b6114948989896118b4565b505050505050505050565b600c546001146114c15760405162461bcd60e51b815260040161048390611f81565b6000600c556006546040516370a0823160e01b81523060048201526115da916001600160a01b0316906370a082319060240160206040518083038186803b15801561150b57600080fd5b505afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115439190611e3d565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115be9190611e3d565b6008546001600160701b0380821691600160701b9004166116fc565b6001600c55565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161163d9190611ee6565b6000604051808303816000865af19150503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b50915091508180156116a95750805115806116a95750808060200190518101906116a99190611e1d565b6116f55760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610483565b5050505050565b6001600160701b03841180159061171a57506001600160701b038311155b61175c5760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610483565b600061176d640100000000426120ae565b60085490915063ffffffff600160e01b909104811682039081161580159061179d57506001600160701b03841615155b80156117b157506001600160701b03831615155b1561181c578063ffffffff166117d9856117ca86611c99565b6001600160e01b031690611cb8565b600980546001600160e01b03929092169290920201905563ffffffff8116611804846117ca87611c99565b600a80546001600160e01b0392909216929092020190555b506008805463ffffffff8316600160e01b026001600160e01b036001600160701b03888116600160701b9081026001600160e01b03199095168b83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a15050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166000908152600160205260408120805483929061193e90849061204c565b90915550506001600160a01b0382166000908152600160205260408120805483929061196b908490611fac565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161190991815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0857600080fd5b505afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190611ce9565b600b546001600160a01b038216158015945091925090611af1578015611aec576000611a7b610c636001600160701b0380881690891661202d565b90506000611a8883611b05565b905080821115611ae9576000611a9e828461204c565b600054611aab919061202d565b9050600082611abb85600561202d565b611ac59190611fac565b90506000611ad38284611fea565b90508015611ae557611ae58782611b75565b5050505b50505b611afd565b8015611afd576000600b555b505092915050565b60006003821115611b665750806000611b1f600283611fea565b611b2a906001611fac565b90505b81811015611b6057905080600281611b458186611fea565b611b4f9190611fac565b611b599190611fea565b9050611b2d565b50919050565b8115611b70575060015b919050565b80600080828254611b869190611fac565b90915550506001600160a01b03821660009081526001602052604081208054839290611bb3908490611fac565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310611c0d5781611c0f565b825b9392505050565b6001600160a01b03821660009081526001602052604081208054839290611c3e90849061204c565b9250508190555080600080828254611c56919061204c565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611bf2565b6000611cb2600160701b6001600160701b038416611ffe565b92915050565b6000611c0f6001600160701b03831684611fc4565b600060208284031215611cde578081fd5b8135611c0f816120ee565b600060208284031215611cfa578081fd5b8151611c0f816120ee565b60008060408385031215611d17578081fd5b8235611d22816120ee565b91506020830135611d32816120ee565b809150509250929050565b600080600060608486031215611d51578081fd5b8335611d5c816120ee565b92506020840135611d6c816120ee565b929592945050506040919091013590565b600080600080600080600060e0888a031215611d97578283fd5b8735611da2816120ee565b96506020880135611db2816120ee565b95506040880135945060608801359350608088013560ff81168114611dd5578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611e04578182fd5b8235611e0f816120ee565b946020939093013593505050565b600060208284031215611e2e578081fd5b81518015158114611c0f578182fd5b600060208284031215611e4e578081fd5b5051919050565b600080600080600060808688031215611e6c578081fd5b85359450602086013593506040860135611e85816120ee565b9250606086013567ffffffffffffffff80821115611ea1578283fd5b818801915088601f830112611eb4578283fd5b813581811115611ec2578384fd5b896020828501011115611ed3578384fd5b9699959850939650602001949392505050565b60008251611ef8818460208701612063565b9190910192915050565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b6020815260008251806020840152611f6d816040850160208701612063565b601f01601f19169190910160400192915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60008219821115611fbf57611fbf6120c2565b500190565b60006001600160e01b0383811680611fde57611fde6120d8565b92169190910492915050565b600082611ff957611ff96120d8565b500490565b60006001600160e01b0382811684821681151582840482111615612024576120246120c2565b02949350505050565b6000816000190483118215151615612047576120476120c2565b500290565b60008282101561205e5761205e6120c2565b500390565b60005b8381101561207e578181015183820152602001612066565b8381111561208d576000848401525b50505050565b60006000198214156120a7576120a76120c2565b5060010190565b6000826120bd576120bd6120d8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461210357600080fd5b5056fea2646970667358221220016b6f924fcf5a9f69047fc79f9d249da56bea86af56089871e8067fbbf4b29164736f6c63430008040033a26469706673582212206df6fdc6123faf653b240156dbeffa82787cf4ca21e76ee8371a58176208694e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 369,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 372,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 379,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 383,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}